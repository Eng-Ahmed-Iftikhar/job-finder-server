// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?   // Made optional for social login users
  firstName       String?
  lastName        String?
  isActive        Boolean   @default(true)
  isEmailVerified Boolean   @default(false)
  role            UserRole  @default(USER)
  
  // Social login fields
  socialProvider  SocialProvider?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  verificationCodes VerificationCode[]
  profile         Profile?
  phoneNumbers    UserPhoneNumber[]

  @@map("users")
}

// Verification codes table
model VerificationCode {
  id        String              @id @default(cuid())
  userId    String
  code      String
  type      VerificationCodeType
  expiresAt DateTime
  isUsed    Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

// Profile model for user details
model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  city        String?
  state       String?
  country     String?
  address     String?
  pictureUrl  String?
  resumeUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumbers UserPhoneNumber[]

  @@map("profiles")
}

// Phone number model for user phone numbers
model UserPhoneNumber {
  id          String   @id @default(cuid())
  userId      String
  profileId   String
  countryCode String
  number      String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("user_phone_numbers")
}

enum UserRole {
  USER
  ADMIN
  EMPLOYER
  CANDIDATE
}

enum VerificationCodeType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_VERIFICATION
}

enum SocialProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  LINKEDIN
  GITHUB
}
